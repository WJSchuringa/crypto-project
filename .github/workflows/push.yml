name: golang-pipeline
on: 
  push:
    branches:    
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - '!main'   # excludes master
jobs:

  # verify:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')  
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Create Branch On Direct Push To Master

  test:
    runs-on: ubuntu-latest
   # if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - name: Run Unit Tests
        run: go test
      - uses: nashmaniac/create-issue-action@v1.1
        if: ${{ failure() }} # only run when this job is failed.
        name: Create Issue Action
        with:
          title: Linter Failed
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          labels: refactoring-needed, help needed
          body: Workflow failed for commit ${{github.sha}}


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: startsWith(github.ref, 'refs/tags')
  #   steps:
  #     - name: Extract Version
  #       id: version_step
  #       run: |
  #         echo "##[set-output name=version;]VERSION=${GITHUB_REF#$"refs/tags/v"}"
  #         echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}"
  #         echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"
  #     - name: Print Version
  #       run: |
  #         echo ${{steps.version_step.outputs.version_tag}}
  #         echo ${{steps.version_step.outputs.latest_tag}}
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v1

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

  #     - name: PrepareReg Names
  #       id: read-docker-image-identifiers
  #       run: |
  #         echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
  #         echo LASTEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         tags: |
  #           ${{env.VERSION_TAG}}
  #           ${{env.LASTEST_TAG}}
  #         build-args: |
  #           ${{steps.version_step.outputs.version}}
  #     - name: Deploy to Azure Container Instances
  #       uses: Azure/aci-deploy@v1
