name: unit-test-pipeline
on: 
  pull_request:
  push:
    branches:    
      - '**'       
jobs:
  unittests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      # Checkout your project with git
      - name: Checkout
        uses: actions/checkout@v2

      # Install Go on the VM running the action.
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      # Install gotestfmt on the VM running the action.
      - name: Set up gotestfmt
        uses: haveyoudebuggedit/gotestfmt-action@v2
        with:
          # Optional: pass GITHUB_TOKEN to avoid rate limiting.
          token: ${{ secrets.GITHUB_TOKEN }}
          # Optional: pass the gotestfmt version you want to run. 
          version: v2.0.0
          # Optional: pass an organization name and repo to use a fork
          org: haveyoudebuggedit
          repo: gotestfmt

      # Run tests with nice formatting. Save the original log in /tmp/gotest.log
      - name: Run tests
        run: |
          set -euo pipefail
          go test -json -v ./... 2>&1 | tee /tmp/gotest.log | gotestfmt

      # Upload the original go test log as an artifact for later review.
      - name: Upload test log
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test-log
          path: /tmp/gotest.log
          if-no-files-found: error

  # unittests:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run Unit Tests
  #       id: unit_tests
  #       run: go test
  

  aftercare:
    name: run-if-failed
    runs-on: ubuntu-latest
    needs: unittests
    if: always() && (needs.unittests.result == 'failure')
    steps:
      - uses: actions/checkout@v2

      - uses: JasonEtco/create-an-issue@v2
        name: Create Issue If Previous Failed
        id: create-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{github.sha}}
          GITHUB_ACTION_REPOSITORY: ${{github.event_path}}
          ACTOR: ${{github.actor}}
          REPOSITORY: ${{github.repository}}
          BRANCH: ${{github.ref_name}}
          EVENT: ${{github.event_name}}
          RUN_ID: ${{github.run_id}}
          JOB: ${{github.job}}
          STATUS: ${{job.status}}
          WORKFLOW: ${{github.workflow}}
        with:
          assignees: ${{env.ACTOR}}
          filename: .github/blame-template.md

      - name: Create or Update Project Card
        uses: peter-evans/create-or-update-project-card@v1
        with:
          project-name: test
          column-name: triage
          issue-number: ${{ steps.create-issue.outputs.number }}

      - uses: actions/checkout@v2
      - name: Create Branch
        run: |
         git branch "fix/${{env.GITHUB_SHA}}"
         git push origin "fix/${{env.GITHUB_SHA}}"

  # test2:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: nashmaniac/create-issue-action@v1.1
  #     name: Create Issue Action
  #     with:
  #       title: Build Faile
  #       token: ${{secrets.GITHUB_TOKEN}}
  #       assignees: ${{github.actor}}
  #       labels: worflow-failed
  #       body: Workflow failed for commit ${{github.sha}}


  # create-branch:
  #   runs-on: ubuntu-latest
  #   steps:
